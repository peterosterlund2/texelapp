apply plugin: 'com.android.application'

android {
    compileSdkVersion 28

    defaultConfig {
        applicationId "org.petero.texelchessengine"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 13
        versionName "1.08a13"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            ndkBuild {
                arguments '-j8'
            }
        }
    }

    if (project.hasProperty("RELEASE_STORE_FILE")) {
        signingConfigs {
            release {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                signingConfig signingConfigs.release
            }
        }
    }

    externalNativeBuild {
        ndkBuild {
            path file('src/main/cpp/Android.mk')
        }
    }

    aaptOptions {
       noCompress 'so'
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

// Copy texel executables to libs directory
task copyToAssets(type: Copy, dependsOn: 'externalNativeBuildRelease') {
    from('build/intermediates/ndkBuild/release/obj/local') {
        include '*/texel'
    }
    into 'src/main/assets'
    rename { String f -> return "libtexel.so" }
}
tasks.withType(JavaCompile) {
    t -> t.dependsOn copyToAssets
}
